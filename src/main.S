.syntax unified
.global main
.type main, %function

/*
  r1,r2,r3 are temporary registers 
  r4 is a counter
  r5 is a counter
  r6 is a number which stands for how many times to run in the semiperiods/periods
  r7 is a number which controls the tempo
  r8 is a number which controls the frequency of the note fa
  r8 is also a counter related to r6
  r9 is a counter related to r6 or a temporary register
  r10-r12 is the label memory address of the instruction
  r11 is also a temporary register
*/
main:
  bl init //init the audio
  ldr r7,=#24000 
  mov r0,r7 //mov r7 to r0 to make r0 as a temporary variable
  str r0,[sp,#-4]! 
  @ and store it into a memory when we need that value then load that value from memory to the register r0
  mov r8,#40
@ r8 is a number which stands for the frequency of the note that i want to change (from 40 {48000/587.33/2-1} to 56  {48000/440/2 +1 }) 
@ so as the note will change the frequncy from 440hz to 587.33 hz
@ mov r8 #40 is to initialize r8

loop:
  ldr r7,=#24000
  bl note_do
  bl sound_pause
  @ sound pause r0 = 0
  ldr r7,=#36000
  bl note_fa_change_initial
  @the note will change the frequncy from 440hz to 587.33 hz
  ldr r7,=#12000
  bl sound_pause
  bl change_time
  @ change the r0
  bl note_do
  ldr r7,=#24000
  bl sound_pause
  bl note_so
  bl sound_pause
  @ drum wave set
  ldr r7,=#72000
  bl sin_wave_harmony_initial
  bl sound_pause
  bl sin_chord_wave_initial
  bl sound_pause
  bl drum_wave_set
  b loop

@  r7 is a variable which controls the tempo of the music and it passes r7 as a parameter into the function called change_time

drum_wave_set:
  str lr,[sp,#-4]!
  @ sp = sp-4, and store lr to the stack pointer
  ldr r7,=#24000
  bl drum_wave_snare_initial
  bl sound_pause
  bl drum_wave_drum_initial
  bl sound_pause
  bl drum_wave_drum_initial
  bl sound_pause
  bl drum_wave_drum_initial
  bl sound_pause
  bl drum_wave_drum_initial
  bl sound_pause
  bl drum_wave_bass_initial
  bl sound_pause
  bl drum_wave_bass_initial
  bl sound_pause
  bl drum_wave_toms_initial
  bl sound_pause
  bl drum_wave_harmony_initial
  ldr r7,=#12000
  bl sound_pause
  bl drum_wave_cymbal_initial
  bl sound_pause
  ldr r7,=#96000
  bl sound_pause
  ldr lr,[sp],#4
  @ load the data from sp memory to lr, sp = sp+4
  bx lr
  @ back to the drum wave
  /*	drum:100hz,
      bass:80hz,
      snare:240hz,
      toms:200hz,
      cymbal:4000hz
      harmony:300hz + 150hz
  */

change_time://change the r0(time)
  ldr r0,[sp],#4
  subs r0,#1000
  beq initial_time
  movs r7,r0
  str r0,[sp,#-4]!
  bx lr

@ for every time call the change_time function, it loads the data which has stored in the main function/initial_time and substacts the r0 by 1000 and mov r7,r0 and then branch back the loop

initial_time:
  mov r0,r7
  str r0,[sp,#-4]!
  bx lr

@ if r0 = 0 then branch to initial time which move r7 data to r0 data ,store r0 to the stack memory and then branch back to the loop

note_do:
  str lr,[sp,#-4]!
  mov r6,#55  //set the frequency 48000/440/2 hz
  b sequence_up_initial

note_so:
  str lr,[sp,#-4]!
  mov r6,#36 //set the frequency 48000/659.33/2 hz
  b sequence_up_initial

note_fa_change_initial:
  str lr,[sp,#-4]!
  b note_fa_change

note_fa_initial:
  mov r8,#40 //set the frequency 48000/587.33/2 -1

note_fa_change:
  add r8,#1 //48000/587.33/2 ~ 48000/440/2
  mov r6,r8
  cmp r8,#56  //if r8 = 56 then initialize r8 to 40
  beq note_fa_initial
  b sequence_up_initial
  
branch_to_loop:
  mov r5,#0 //initialize r5 to 0
  ldr lr,[sp],#4
  bx lr

branch_to_loop_ldr_r8:
  mov r5,#0 //initialize r5 to 0
  ldr r8,[sp],#4
  ldr lr,[sp],#4
  bx lr

drum_wave_branch_to_loop:
  mov r5,#0 //initialize r5 to 0
  pop {r0-r3,r9}
  ldr r8,[sp],#4
  ldr lr,[sp],#4
  bx lr

@ clear the stack and load r8,lr

sequence_up_initial:
  mov r4,#0
  b sequence_up

sequence_up:
  ldr r0,=0x5000 //positive amplitude
  bl BSP_AUDIO_OUT_Play_Sample
  add r5,#1
  cmp r5,r7
  beq branch_to_loop
  add r4,#1
  cmp r4,r6
  beq sequence_down_initial
  b sequence_up

@ after initialize the data, r4=r4+1 when r4 counts to r6 then branch to trough wave, r5 = r5+1 when r5 counts to r7 then branch back with link register to the loop
@ and keep looping

sequence_down_initial:
  mov r4,#0
  b sequence_down

sequence_down:
  ldr r0,=0xAFFF //negative amplitude
  bl BSP_AUDIO_OUT_Play_Sample
  add r5,#1
  cmp r5,r7
  beq branch_to_loop
  add r4,#1
  cmp r4,r6
  beq sequence_up_initial
  b sequence_down

@ after initialize the data, r4=r4+1 when r4 counts to r6 then branch to crest wave, r5 = r5+1 when r5 counts to r7 then branch back with link register to the loop
@ and keep looping

sound_pause:
  str lr,[sp,#-4]!
  b no_music

no_music:
  movs r0,0  //set r0 = 0
  bl BSP_AUDIO_OUT_Play_Sample
  add r5,#1
  cmp r5,r7
  beq branch_to_loop
  b no_music

@ r5 = r5+1 when r5 counts to r7 then branch back with link register to the loop and keep looping
sin_wave_harmony_initial:  
  str lr,[sp,#-4]!
  ldr r10 ,= sin_wave1_harmony
  ldr r11 ,= sin_wave2_harmony
  mov r4,#0
  mov r9,#0

@ push lr into stack and give r10, r11 the initial label memory address and initialize r4,r9
sin_harmony_wave_1:
  ldr r0,[r10]
  mov r6,#184
  add r10,#2
  @ r10 = r10 + 2, so that r0 can load the hword in next two memory cell
  add r4,#1
  cmp r4,r6
  beq sin_harmony_wave_1_initial
  b sin_harmony_wave_2

@ load the number in the address to register r0 and add r4 counter one and compare r4 and r6, if r6 = r4, branch to sin_harmony_wave_1_initial which initialize r4 and memory address r10
sin_harmony_wave_1_initial:
  ldr r10 ,= sin_wave1_harmony
  mov r4,#0
  b sin_harmony_wave_1
@ initialize

sin_harmony_wave_2:
  ldr r1,[r11]
  add r9,#1
  mov r6,#123
  cmp r9,r6
  beq sin_harmony_wave_2_initial
  add r0,r1
  bl BSP_AUDIO_OUT_Play_Sample
  add r5,#1
  cmp r5,r7
  beq branch_to_loop
  add r11,#2
  b sin_harmony_wave_1

@ load the number in the address to register r1 and add r9 counter one and compare r9 and r6, if r6 = r9, branch to sin_harmony_wave_2_initial which initialize r9 and memory address r11
sin_harmony_wave_2_initial:
  ldr r11 ,= sin_wave2_harmony
  mov r9,#0
  b sin_harmony_wave_2

sin_chord_wave_initial:
  str lr,[sp,#-4]!
  str r8,[sp,#-4]! 
  ldr r10 ,= sin_wave1_chord
  ldr r11 ,= sin_wave2_chord
  ldr r12 ,= sin_wave3_chord
  mov r4,#0
  mov r9,#0
  mov r8,#0

@ as r8 is used as before, so first save the r8 register into stack and then after the process load r8 register out of the stack
@ initialize r10,r11,r12 as label memory address
@ initialize r4,r9,r8

sin_chord_wave_1:
  ldr r0,[r10]
  mov r6,#184
  add r10,#2
  add r4,#1
  cmp r4,r6
  beq sin_chord_wave_1_initial
  b sin_chord_wave_2

sin_chord_wave_1_initial:
  ldr r10 ,= sin_wave1_chord
  mov r4,#0
  b sin_chord_wave_1

@ load the number in the address to register r0 and add r9 counter one and compare r4 and r6, if r6 = r4, branch to sin_harmony_wave_2_initial which initialize r4 and memory address r10

sin_chord_wave_2:
  ldr r1,[r11]
  mov r6,#146
  add r11,#2
  add r9,#1
  cmp r9,r6
  beq sin_chord_wave_2_initial
  b sin_chord_wave_3

sin_chord_wave_2_initial:
  ldr r11 ,= sin_wave2_chord
  mov r9,#0
  b sin_chord_wave_2

@ load the number in the address to register r1 and add r9 counter one and compare r9 and r6, if r6 = r9, branch to sin_harmony_wave_2_initial which initialize r9 and memory address r11

sin_chord_wave_3:
  ldr r2,[r12]
  add r8,#1
  mov r6,#123
  cmp r8,r6
  beq sin_chord_wave_3_initial
  add r0,r1
  add r0,r2
  bl BSP_AUDIO_OUT_Play_Sample
  add r5,#1
  cmp r5,r7
  beq branch_to_loop_ldr_r8
  add r12,#2
  b sin_chord_wave_1

sin_chord_wave_3_initial:
  ldr r12 ,= sin_wave3_chord
  mov r8,#0
  b sin_chord_wave_3

@ load the number in the address to register r2 and add r9 counter one and compare r8 and r6, if r6 = r8, branch to sin_harmony_wave_2_initial which initialize r8 and memory address r12

drum_wave_drum_initial:
  str lr,[sp,#-4]!
  str r8,[sp,#-4]!
  @ store link register and r8 to the memory
  ldr r10,=sin_wave_drum
  mov r11,r10
  @ r11 is copy of r10
  mov r4,#0
  mov r5,#0
  @ initialize the counter
  mov r8,#0
  @ intialize the multiplier
  mov r0,#4
  mov r1,#1
  mov r2,#2
  mov r3,#480
  mov r9,#480
  /*r0-r3,r9 are parameters,
    r8 is keeping adding 4 in the Attack part
    r8 is keeping substracting 1 in the Decay part
    r8 is stable in the sustain part
    r8 is keeping substacting 2 in the release part
    r3 is how many times in the waveform cycle
    A:D:S:R = 1:2:4:1
    r9 is how many times in the attack part
    A=r9, D=2*r9, S=4*r9, R=r9
  */
  push {r0-r3,r9}
  @ push r0,r1,r2,r3,r9 to the memory
  b drum_wave_attack

drum_wave_bass_initial:
  str lr,[sp,#-4]!
  str r8,[sp,#-4]!
  @ store link register and r8 to the memory
  ldr r10,=sin_wave_bass
  mov r11,r10
  @ r11 is copy of r10
  mov r4,#0
  mov r5,#0
  @ initialize the counter
  mov r8,#0
  @ intialize the multiplier
  mov r0,#4
  mov r1,#1
  mov r2,#2
  mov r3,#600
  mov r9,#600
  /*r0-r3,r9 are parameters,
    r8 is keeping adding 4 in the Attack part
    r8 is keeping substracting 1 in the Decay part
    r8 is stable in the sustain part
    r8 is keeping substacting 2 in the release part
    r3 is how many times in the waveform cycle
    A:D:S:R = 1:2:4:1
    r9 is how many times in the attack part
  */
  push {r0-r3,r9}
  b drum_wave_attack

drum_wave_snare_initial:
  str lr,[sp,#-4]!
  str r8,[sp,#-4]!
  ldr r10,=sin_wave_snare
  mov r11,r10
  mov r4,#0
  mov r5,#0
  mov r8,#0
  mov r0,#4
  mov r1,#1
  mov r2,#2
  mov r3,#200
  mov r9,#400
  push {r0-r3,r9}
  b drum_wave_attack

drum_wave_toms_initial:
  str lr,[sp,#-4]!
  str r8,[sp,#-4]!
  ldr r10,=sin_wave_toms
  mov r11,r10
  mov r4,#0
  mov r5,#0
  mov r8,#0
  mov r0,#4
  mov r1,#1
  mov r2,#2
  mov r3,#240
  mov r9,#480
    /*r0-r3,r9 are parameters,
    r8 is keeping adding 4 in the Attack part
    r8 is keeping substracting 1 in the Decay part
    r8 is stable in the sustain part
    r8 is keeping substacting 2 in the release part
    r3 is how many times in the waveform cycle
    A:D:S:R = 1:2:4:1
    r9 is how many times in the attack part
  */
  push {r0-r3,r9}
  b drum_wave_attack

drum_wave_cymbal_initial:
  str lr,[sp,#-4]!
  str r8,[sp,#-4]!
  ldr r10,=sin_wave_cymbal
  mov r11,r10
  mov r4,#0
  mov r5,#0
  mov r8,#0
  mov r0,#4
  mov r1,#1
  mov r2,#2
  mov r3,#12
  mov r9,#300
  push {r0-r3,r9}
  b drum_wave_attack

drum_wave_harmony_initial:
  str lr,[sp,#-4]!
  str r8,[sp,#-4]!
  ldr r10,=sin_wave_harmony
  mov r11,r10
  mov r4,#0
  mov r5,#0
  mov r8,#0
  mov r0,#4
  mov r1,#1
  mov r2,#2
  mov r3,#320
  mov r9,#320
  push {r0-r3,r9}
  b drum_wave_attack

drum_wave_attack:
  ldr r0,[r10]
  @ load the number in the memory address corresponding to the r10 number
  mul r0,r8
  @ r0 is each value of the base sine wave, and after that times r8. Each time play the music r8 add 4. 
  @ In that way can create attack wave
  bl BSP_AUDIO_OUT_Play_Sample
  add r10,#2
  @ each time make the music, the memory address add 2 offset
  add r5,#1
  @ counter
  ldr r3,[sp,#12]
  @ get the number r3 from the stack
  cmp r5,r3
  beq attack_initial
  ldr r2,[sp]
   @ get the number r0 from the stack
  add r8,r2
  @ r8 = r8 + r2, everytime play the music r8 + 4. 
  add r4,#1
  @ counter
  ldr r9,[sp,#16]
 @ get the number r9 from the stack
  cmp r4,r9
  beq drum_wave_decay_initial
  b drum_wave_attack

attack_initial:
  mov r10,r11
  mov r5,#0 
  b drum_wave_attack

@ initialize the counter and the memory address

drum_wave_decay_initial:
  mov r4,#0
  mov r5,#0
  mov r10,r11
  b drum_wave_decay

drum_wave_decay:
  ldr r0,[r10]
  @ load the number in the memory address corresponding to the r10 number
  mul r0,r8
  @ r0 is each value of the base sine wave, and after that times r8. Each time play the music r8 sub 1. 
  @ In that way can create decay wave
  bl BSP_AUDIO_OUT_Play_Sample
  add r10,#2
  @ each time make the music, the memory address add 2 offset
  add r5,#1
  @ counter
  ldr r3,[sp,#12]
  @ get the number r3 from the stack
  cmp r5,r3
  beq decay_initial
  ldr r2,[sp,#4]
  @ get the number r1 from the stack
  sub r8,r2
  add r4,#1
  ldr r9,[sp,#16]
  @ @ get the number r9 from the stack
  mov r1,#2
  mul r9,r1
  cmp r4,r9
  @ A:D = 1:2, the time spend on Decay part is two times longer than Attack part
  beq drum_wave_sustain_initial
  b drum_wave_decay

decay_initial:
  mov r10,r11
  mov r5,#0 
  b drum_wave_decay

@ initialize the counter and the memory address

drum_wave_sustain_initial:
  mov r5,#0
  mov r10,r11
  b drum_wave_sustain

drum_wave_sustain:
  ldr r0,[r10]
  @ load the number in the memory address corresponding to the r10 number
  mul r0,r8
  bl BSP_AUDIO_OUT_Play_Sample
  add r10,#2
  @ each time make the music, the memory address add 2 offset
  add r5,#1
  ldr r3,[sp,#12]
  @ get the number r3 from the stack
  cmp r5,r3
  beq sustain_initial 
  add r4,#1
  @ get the number r9 from the stack
  ldr r9,[sp,#16]
  mov r1,#4
  mul r9,r1
  cmp r4,r9
  @ A:S = 1:4, the time spend on sustain part is two times longer than Attack part
  beq drum_wave_release_initial
  b drum_wave_sustain

sustain_initial:
  mov r10,r11
  mov r5,#0 
  b drum_wave_sustain

@ initialize the counter and the memory address

drum_wave_release_initial:
  mov r4,#0
  mov r5,#0
  mov r10,r11
  b drum_wave_release

drum_wave_release:
  ldr r0,[r10]
  @ load the number in the memory address corresponding to the r10 number
  mul r0,r8
  @ r0 is each value of the base sine wave, and after that times r8. Each time play the music r8 sub 2. 
  @ In that way can create release wave
  bl BSP_AUDIO_OUT_Play_Sample
  add r10,#2
  add r5,#1
  ldr r3,[sp,#12]
  @ get the number r3 from the stack
  cmp r5,r3
  beq release_initial
  ldr r2,[sp,#8]
  @ get the number r2 from the stack
  sub r8,r2
  add r4,#1
  ldr r9,[sp,#16]
  @ get the number r9 from the stack
  cmp r4,r9
  beq drum_wave_branch_to_loop
  b drum_wave_release

release_initial:
  mov r10,r11
  mov r5,#0 
  b drum_wave_release
@ initialize the counter and the memory address

.data
sin_wave1_harmony:
  .hword 0x0000,0x0202,0x0405,0x0606,0x0805,0x0a02,0x0bfc,0x0df2,0x0fe4,0x11d1,0x13b9,0x159b,0x1776,0x194b,0x1b17,0x1cdc,0x1e97,0x204a,0x21f3,0x2391,0x2525,0x26ae,0x282b,0x299c,0x2b00,0x2c57,0x2da1,0x2edd,0x300b,0x312b,0x323b,0x333d,0x342f,0x3511,0x35e3,0x36a5,0x3757,0x37f8,0x3888,0x3906,0x3974,0x39d0,0x3a1b,0x3a55,0x3a7c,0x3a93,0x3a97,0x3a8a,0x3a6b,0x3a3a,0x39f8,0x39a4,0x393f,0x38c9,0x3842,0x37a9,0x3700,0x3646,0x357c,0x34a2,0x33b8,0x32be,0x31b5,0x309d,0x2f76,0x2e41,0x2cfe,0x2bad,0x2a4f,0x28e5,0x276e,0x25eb,0x245d,0x22c3,0x2120,0x1f72,0x1dbb,0x1bfb,0x1a32,0x1861,0x1689,0x14ab,0x12c6,0x10db,0x0eec,0x0cf7,0x0aff,0x0904,0x0706,0x0505,0x0304,0x0101,0xfeff,0xfcfc,0xfafb,0xf8fa,0xf6fc,0xf501,0xf309,0xf114,0xef25,0xed3a,0xeb55,0xe977,0xe79f,0xe5ce,0xe405,0xe245,0xe08e,0xdee0,0xdd3d,0xdba3,0xda15,0xd892,0xd71b,0xd5b1,0xd453,0xd302,0xd1bf,0xd08a,0xcf63,0xce4b,0xcd42,0xcc48,0xcb5e,0xca84,0xc9ba,0xc900,0xc857,0xc7be,0xc737,0xc6c1,0xc65c,0xc608,0xc5c6,0xc595,0xc576,0xc569,0xc56d,0xc584,0xc5ab,0xc5e5,0xc630,0xc68c,0xc6fa,0xc778,0xc808,0xc8a9,0xc95b,0xca1d,0xcaef,0xcbd1,0xccc3,0xcdc5,0xced5,0xcff5,0xd123,0xd25f,0xd3a9,0xd500,0xd664,0xd7d5,0xd952,0xdadb,0xdc6f,0xde0d,0xdfb6,0xe169,0xe324,0xe4e9,0xe6b5,0xe88a,0xea65,0xec47,0xee2f,0xf01c,0xf20e,0xf404,0xf5fe,0xf7fb,0xf9fa,0xfbfb,0xfdfe,0x0000

sin_wave2_harmony:
  .hword 0x0000,0x0304,0x0606,0x0904,0x0bfc,0x0eec,0x11d1,0x14ab,0x1776,0x1a32,0x1cdc,0x1f72,0x21f3,0x245d,0x26ae,0x28e5,0x2b00,0x2cfe,0x2edd,0x309d,0x323b,0x33b8,0x3511,0x3646,0x3757,0x3842,0x3906,0x39a4,0x3a1b,0x3a6b,0x3a93,0x3a93,0x3a6b,0x3a1b,0x39a4,0x3906,0x3842,0x3757,0x3646,0x3511,0x33b8,0x323b,0x309d,0x2edd,0x2cfe,0x2b00,0x28e5,0x26ae,0x245d,0x21f3,0x1f72,0x1cdc,0x1a32,0x1776,0x14ab,0x11d1,0x0eec,0x0bfc,0x0904,0x0606,0x0304,0x0000,0xfcfc,0xf9fa,0xf6fc,0xf404,0xf114,0xee2f,0xeb55,0xe88a,0xe5ce,0xe324,0xe08e,0xde0d,0xdba3,0xd952,0xd71b,0xd500,0xd302,0xd123,0xcf63,0xcdc5,0xcc48,0xcaef,0xc9ba,0xc8a9,0xc7be,0xc6fa,0xc65c,0xc5e5,0xc595,0xc56d,0xc56d,0xc595,0xc5e5,0xc65c,0xc6fa,0xc7be,0xc8a9,0xc9ba,0xcaef,0xcc48,0xcdc5,0xcf63,0xd123,0xd302,0xd500,0xd71b,0xd952,0xdba3,0xde0d,0xe08e,0xe324,0xe5ce,0xe88a,0xeb55,0xee2f,0xf114,0xf404,0xf6fc,0xf9fa,0xfcfc,0x0000

sin_wave1_chord:
  .hword 0x0000,0x0157,0x02ae,0x0404,0x0559,0x06ac,0x07fd,0x094c,0x0a98,0x0be1,0x0d26,0x0e67,0x0fa4,0x10dc,0x120f,0x133d,0x1465,0x1587,0x16a2,0x17b6,0x18c3,0x19c9,0x1ac7,0x1bbd,0x1caa,0x1d8f,0x1e6b,0x1f3e,0x2007,0x20c7,0x217d,0x2228,0x22ca,0x2361,0x23ed,0x246e,0x24e4,0x2550,0x25b0,0x2604,0x264d,0x268b,0x26bd,0x26e3,0x26fd,0x270c,0x270f,0x2706,0x26f2,0x26d1,0x26a5,0x266d,0x262a,0x25db,0x2581,0x251b,0x24ab,0x242f,0x23a8,0x2316,0x227a,0x21d4,0x2123,0x2068,0x1fa4,0x1ed6,0x1dfe,0x1d1e,0x1c35,0x1b43,0x1a49,0x1947,0x183e,0x172d,0x1615,0x14f6,0x13d2,0x12a7,0x1176,0x1041,0x0f06,0x0dc7,0x0c84,0x0b3d,0x09f2,0x08a5,0x0755,0x0602,0x04ae,0x0359,0x0202,0x00ab,0xff55,0xfdfe,0xfca7,0xfb52,0xf9fe,0xf8ab,0xf75b,0xf60e,0xf4c3,0xf37c,0xf239,0xf0fa,0xefbf,0xee8a,0xed59,0xec2e,0xeb0a,0xe9eb,0xe8d3,0xe7c2,0xe6b9,0xe5b7,0xe4bd,0xe3cb,0xe2e2,0xe202,0xe12a,0xe05c,0xdf98,0xdedd,0xde2c,0xdd86,0xdcea,0xdc58,0xdbd1,0xdb55,0xdae5,0xda7f,0xda25,0xd9d6,0xd993,0xd95b,0xd92f,0xd90e,0xd8fa,0xd8f1,0xd8f4,0xd903,0xd91d,0xd943,0xd975,0xd9b3,0xd9fc,0xda50,0xdab0,0xdb1c,0xdb92,0xdc13,0xdc9f,0xdd36,0xddd8,0xde83,0xdf39,0xdff9,0xe0c2,0xe195,0xe271,0xe356,0xe443,0xe539,0xe637,0xe73d,0xe84a,0xe95e,0xea79,0xeb9b,0xecc3,0xedf1,0xef24,0xf05c,0xf199,0xf2da,0xf41f,0xf568,0xf6b4,0xf803,0xf954,0xfaa7,0xfbfc,0xfd52,0xfea9,0x0000

sin_wave2_chord:
  .hword 0x0000,0x01b1,0x0361,0x0510,0x06bc,0x0865,0x0a0a,0x0baa,0x0d45,0x0ed9,0x1066,0x11ec,0x1368,0x14db,0x1645,0x17a3,0x18f6,0x1a3e,0x1b78,0x1ca6,0x1dc5,0x1ed6,0x1fd9,0x20cc,0x21af,0x2283,0x2345,0x23f7,0x2497,0x2526,0x25a3,0x260e,0x2666,0x26ac,0x26e0,0x2701,0x270f,0x270a,0x26f3,0x26c9,0x268c,0x263c,0x25db,0x2567,0x24e1,0x2449,0x23a0,0x22e6,0x221b,0x2140,0x2054,0x1f5a,0x1e50,0x1d37,0x1c11,0x1adc,0x199c,0x184e,0x16f5,0x1591,0x1423,0x12ab,0x112a,0x0fa1,0x0e10,0x0c79,0x0adb,0x0938,0x0791,0x05e6,0x0439,0x0289,0x00d8,0xff28,0xfd77,0xfbc7,0xfa1a,0xf86f,0xf6c8,0xf525,0xf387,0xf1f0,0xf05f,0xeed6,0xed55,0xebdd,0xea6f,0xe90b,0xe7b2,0xe664,0xe524,0xe3ef,0xe2c9,0xe1b0,0xe0a6,0xdfac,0xdec0,0xdde5,0xdd1a,0xdc60,0xdbb7,0xdb1f,0xda99,0xda25,0xd9c4,0xd974,0xd937,0xd90d,0xd8f6,0xd8f1,0xd8ff,0xd920,0xd954,0xd99a,0xd9f2,0xda5d,0xdada,0xdb69,0xdc09,0xdcbb,0xdd7d,0xde51,0xdf34,0xe027,0xe12a,0xe23b,0xe35a,0xe488,0xe5c2,0xe70a,0xe85d,0xe9bb,0xeb25,0xec98,0xee14,0xef9a,0xf127,0xf2bb,0xf456,0xf5f6,0xf79b,0xf944,0xfaf0,0xfc9f,0xfe4f,0x0000

sin_wave3_chord:
  .hword 0x0000,0x0202,0x0404,0x0602,0x07fd,0x09f2,0x0be1,0x0dc7,0x0fa4,0x1176,0x133d,0x14f6,0x16a2,0x183e,0x19c9,0x1b43,0x1caa,0x1dfe,0x1f3e,0x2068,0x217d,0x227a,0x2361,0x242f,0x24e4,0x2581,0x2604,0x266d,0x26bd,0x26f2,0x270c,0x270c,0x26f2,0x26bd,0x266d,0x2604,0x2581,0x24e4,0x242f,0x2361,0x227a,0x217d,0x2068,0x1f3e,0x1dfe,0x1caa,0x1b43,0x19c9,0x183e,0x16a2,0x14f6,0x133d,0x1176,0x0fa4,0x0dc7,0x0be1,0x09f2,0x07fd,0x0602,0x0404,0x0202,0x0000,0xfdfe,0xfbfc,0xf9fe,0xf803,0xf60e,0xf41f,0xf239,0xf05c,0xee8a,0xecc3,0xeb0a,0xe95e,0xe7c2,0xe637,0xe4bd,0xe356,0xe202,0xe0c2,0xdf98,0xde83,0xdd86,0xdc9f,0xdbd1,0xdb1c,0xda7f,0xd9fc,0xd993,0xd943,0xd90e,0xd8f4,0xd8f4,0xd90e,0xd943,0xd993,0xd9fc,0xda7f,0xdb1c,0xdbd1,0xdc9f,0xdd86,0xde83,0xdf98,0xe0c2,0xe202,0xe356,0xe4bd,0xe637,0xe7c2,0xe95e,0xeb0a,0xecc3,0xee8a,0xf05c,0xf239,0xf41f,0xf60e,0xf803,0xf9fe,0xfbfc,0xfdfe,0x0000

sin_wave_snare:
  .hword 0x0000,0x0000,0x0001,0x0001,0x0002,0x0003,0x0003,0x0004,0x0004,0x0005,0x0006,0x0006,0x0007,0x0007,0x0008,0x0009,0x0009,0x000a,0x000a,0x000b,0x000b,0x000c,0x000c,0x000d,0x000d,0x000e,0x000e,0x000f,0x000f,0x000f,0x0010,0x0010,0x0010,0x0011,0x0011,0x0011,0x0012,0x0012,0x0012,0x0012,0x0013,0x0013,0x0013,0x0013,0x0013,0x0013,0x0013,0x0013,0x0013,0x0013,0x0014,0x0013,0x0013,0x0013,0x0013,0x0013,0x0013,0x0013,0x0013,0x0013,0x0013,0x0012,0x0012,0x0012,0x0012,0x0011,0x0011,0x0011,0x0010,0x0010,0x0010,0x000f,0x000f,0x000f,0x000e,0x000e,0x000d,0x000d,0x000c,0x000c,0x000b,0x000b,0x000a,0x000a,0x0009,0x0009,0x0008,0x0007,0x0007,0x0006,0x0006,0x0005,0x0004,0x0004,0x0003,0x0003,0x0002,0x0001,0x0001,0x0000,0x0000,0x0000,0xffff,0xffff,0xfffe,0xfffd,0xfffd,0xfffc,0xfffc,0xfffb,0xfffa,0xfffa,0xfff9,0xfff9,0xfff8,0xfff7,0xfff7,0xfff6,0xfff6,0xfff5,0xfff5,0xfff4,0xfff4,0xfff3,0xfff3,0xfff2,0xfff2,0xfff1,0xfff1,0xfff1,0xfff0,0xfff0,0xfff0,0xffef,0xffef,0xffef,0xffee,0xffee,0xffee,0xffee,0xffed,0xffed,0xffed,0xffed,0xffed,0xffed,0xffed,0xffed,0xffed,0xffed,0xffec,0xffed,0xffed,0xffed,0xffed,0xffed,0xffed,0xffed,0xffed,0xffed,0xffed,0xffee,0xffee,0xffee,0xffee,0xffef,0xffef,0xffef,0xfff0,0xfff0,0xfff0,0xfff1,0xfff1,0xfff1,0xfff2,0xfff2,0xfff3,0xfff3,0xfff4,0xfff4,0xfff5,0xfff5,0xfff6,0xfff6,0xfff7,0xfff7,0xfff8,0xfff9,0xfff9,0xfffa,0xfffa,0xfffb,0xfffc,0xfffc,0xfffd,0xfffd,0xfffe,0xffff,0xffff,0x0000,0x0000

sin_wave_drum:
  .hword 0x0000,0x0000,0x0000,0x0000,0x0000,0x0001,0x0001,0x0001,0x0001,0x0001,0x0002,0x0002,0x0002,0x0002,0x0002,0x0003,0x0003,0x0003,0x0003,0x0003,0x0004,0x0004,0x0004,0x0004,0x0004,0x0005,0x0005,0x0005,0x0005,0x0005,0x0006,0x0006,0x0006,0x0006,0x0006,0x0007,0x0007,0x0007,0x0007,0x0007,0x0007,0x0008,0x0008,0x0008,0x0008,0x0008,0x0009,0x0009,0x0009,0x0009,0x0009,0x0009,0x000a,0x000a,0x000a,0x000a,0x000a,0x000a,0x000b,0x000b,0x000b,0x000b,0x000b,0x000b,0x000b,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000d,0x000d,0x000d,0x000d,0x000d,0x000d,0x000d,0x000d,0x000d,0x000e,0x000e,0x000e,0x000e,0x000e,0x000e,0x000e,0x000e,0x000e,0x000e,0x000e,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x0010,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000e,0x000e,0x000e,0x000e,0x000e,0x000e,0x000e,0x000e,0x000e,0x000e,0x000e,0x000d,0x000d,0x000d,0x000d,0x000d,0x000d,0x000d,0x000d,0x000d,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000b,0x000b,0x000b,0x000b,0x000b,0x000b,0x000b,0x000a,0x000a,0x000a,0x000a,0x000a,0x000a,0x0009,0x0009,0x0009,0x0009,0x0009,0x0009,0x0008,0x0008,0x0008,0x0008,0x0008,0x0007,0x0007,0x0007,0x0007,0x0007,0x0007,0x0006,0x0006,0x0006,0x0006,0x0006,0x0005,0x0005,0x0005,0x0005,0x0005,0x0004,0x0004,0x0004,0x0004,0x0004,0x0003,0x0003,0x0003,0x0003,0x0003,0x0002,0x0002,0x0002,0x0002,0x0002,0x0001,0x0001,0x0001,0x0001,0x0001,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xffff,0xffff,0xffff,0xffff,0xffff,0xfffe,0xfffe,0xfffe,0xfffe,0xfffe,0xfffd,0xfffd,0xfffd,0xfffd,0xfffd,0xfffc,0xfffc,0xfffc,0xfffc,0xfffc,0xfffb,0xfffb,0xfffb,0xfffb,0xfffb,0xfffa,0xfffa,0xfffa,0xfffa,0xfffa,0xfff9,0xfff9,0xfff9,0xfff9,0xfff9,0xfff9,0xfff8,0xfff8,0xfff8,0xfff8,0xfff8,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff6,0xfff6,0xfff6,0xfff6,0xfff6,0xfff6,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff3,0xfff3,0xfff3,0xfff3,0xfff3,0xfff3,0xfff3,0xfff3,0xfff3,0xfff2,0xfff2,0xfff2,0xfff2,0xfff2,0xfff2,0xfff2,0xfff2,0xfff2,0xfff2,0xfff2,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff0,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff2,0xfff2,0xfff2,0xfff2,0xfff2,0xfff2,0xfff2,0xfff2,0xfff2,0xfff2,0xfff2,0xfff3,0xfff3,0xfff3,0xfff3,0xfff3,0xfff3,0xfff3,0xfff3,0xfff3,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff6,0xfff6,0xfff6,0xfff6,0xfff6,0xfff6,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff8,0xfff8,0xfff8,0xfff8,0xfff8,0xfff9,0xfff9,0xfff9,0xfff9,0xfff9,0xfff9,0xfffa,0xfffa,0xfffa,0xfffa,0xfffa,0xfffb,0xfffb,0xfffb,0xfffb,0xfffb,0xfffc,0xfffc,0xfffc,0xfffc,0xfffc,0xfffd,0xfffd,0xfffd,0xfffd,0xfffd,0xfffe,0xfffe,0xfffe,0xfffe,0xfffe,0xffff,0xffff,0xffff,0xffff,0xffff,0x0000,0x0000,0x0000,0x0000,0x0000

sin_wave_bass:
  .hword 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0002,0x0002,0x0002,0x0002,0x0002,0x0002,0x0002,0x0002,0x0003,0x0003,0x0003,0x0003,0x0003,0x0003,0x0003,0x0004,0x0004,0x0004,0x0004,0x0004,0x0004,0x0004,0x0004,0x0005,0x0005,0x0005,0x0005,0x0005,0x0005,0x0005,0x0005,0x0006,0x0006,0x0006,0x0006,0x0006,0x0006,0x0006,0x0006,0x0006,0x0007,0x0007,0x0007,0x0007,0x0007,0x0007,0x0007,0x0007,0x0007,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0009,0x0009,0x0009,0x0009,0x0009,0x0009,0x0009,0x0009,0x0009,0x0009,0x000a,0x000a,0x000a,0x000a,0x000a,0x000a,0x000a,0x000a,0x000a,0x000a,0x000a,0x000a,0x000a,0x000b,0x000b,0x000b,0x000b,0x000b,0x000b,0x000b,0x000b,0x000b,0x000b,0x000b,0x000b,0x000b,0x000b,0x000b,0x000b,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000d,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000b,0x000b,0x000b,0x000b,0x000b,0x000b,0x000b,0x000b,0x000b,0x000b,0x000b,0x000b,0x000b,0x000b,0x000b,0x000b,0x000a,0x000a,0x000a,0x000a,0x000a,0x000a,0x000a,0x000a,0x000a,0x000a,0x000a,0x000a,0x000a,0x0009,0x0009,0x0009,0x0009,0x0009,0x0009,0x0009,0x0009,0x0009,0x0009,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0007,0x0007,0x0007,0x0007,0x0007,0x0007,0x0007,0x0007,0x0007,0x0006,0x0006,0x0006,0x0006,0x0006,0x0006,0x0006,0x0006,0x0006,0x0005,0x0005,0x0005,0x0005,0x0005,0x0005,0x0005,0x0005,0x0004,0x0004,0x0004,0x0004,0x0004,0x0004,0x0004,0x0004,0x0003,0x0003,0x0003,0x0003,0x0003,0x0003,0x0003,0x0002,0x0002,0x0002,0x0002,0x0002,0x0002,0x0002,0x0002,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xfffe,0xfffe,0xfffe,0xfffe,0xfffe,0xfffe,0xfffe,0xfffe,0xfffd,0xfffd,0xfffd,0xfffd,0xfffd,0xfffd,0xfffd,0xfffc,0xfffc,0xfffc,0xfffc,0xfffc,0xfffc,0xfffc,0xfffc,0xfffb,0xfffb,0xfffb,0xfffb,0xfffb,0xfffb,0xfffb,0xfffb,0xfffa,0xfffa,0xfffa,0xfffa,0xfffa,0xfffa,0xfffa,0xfffa,0xfffa,0xfff9,0xfff9,0xfff9,0xfff9,0xfff9,0xfff9,0xfff9,0xfff9,0xfff9,0xfff8,0xfff8,0xfff8,0xfff8,0xfff8,0xfff8,0xfff8,0xfff8,0xfff8,0xfff8,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff6,0xfff6,0xfff6,0xfff6,0xfff6,0xfff6,0xfff6,0xfff6,0xfff6,0xfff6,0xfff6,0xfff6,0xfff6,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff3,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff6,0xfff6,0xfff6,0xfff6,0xfff6,0xfff6,0xfff6,0xfff6,0xfff6,0xfff6,0xfff6,0xfff6,0xfff6,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff8,0xfff8,0xfff8,0xfff8,0xfff8,0xfff8,0xfff8,0xfff8,0xfff8,0xfff8,0xfff9,0xfff9,0xfff9,0xfff9,0xfff9,0xfff9,0xfff9,0xfff9,0xfff9,0xfffa,0xfffa,0xfffa,0xfffa,0xfffa,0xfffa,0xfffa,0xfffa,0xfffa,0xfffb,0xfffb,0xfffb,0xfffb,0xfffb,0xfffb,0xfffb,0xfffb,0xfffc,0xfffc,0xfffc,0xfffc,0xfffc,0xfffc,0xfffc,0xfffc,0xfffd,0xfffd,0xfffd,0xfffd,0xfffd,0xfffd,0xfffd,0xfffe,0xfffe,0xfffe,0xfffe,0xfffe,0xfffe,0xfffe,0xfffe,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000

sin_wave_toms:
  .hword 0x0000,0x0000,0x0000,0x0001,0x0001,0x0002,0x0002,0x0002,0x0003,0x0003,0x0004,0x0004,0x0004,0x0005,0x0005,0x0006,0x0006,0x0006,0x0007,0x0007,0x0007,0x0008,0x0008,0x0009,0x0009,0x0009,0x000a,0x000a,0x000a,0x000b,0x000b,0x000b,0x000b,0x000c,0x000c,0x000c,0x000c,0x000d,0x000d,0x000d,0x000d,0x000e,0x000e,0x000e,0x000e,0x000e,0x000e,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x0010,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000e,0x000e,0x000e,0x000e,0x000e,0x000e,0x000d,0x000d,0x000d,0x000d,0x000c,0x000c,0x000c,0x000c,0x000b,0x000b,0x000b,0x000b,0x000a,0x000a,0x000a,0x0009,0x0009,0x0009,0x0008,0x0008,0x0007,0x0007,0x0007,0x0006,0x0006,0x0006,0x0005,0x0005,0x0004,0x0004,0x0004,0x0003,0x0003,0x0002,0x0002,0x0002,0x0001,0x0001,0x0000,0x0000,0x0000,0x0000,0x0000,0xffff,0xffff,0xfffe,0xfffe,0xfffe,0xfffd,0xfffd,0xfffc,0xfffc,0xfffc,0xfffb,0xfffb,0xfffa,0xfffa,0xfffa,0xfff9,0xfff9,0xfff9,0xfff8,0xfff8,0xfff7,0xfff7,0xfff7,0xfff6,0xfff6,0xfff6,0xfff5,0xfff5,0xfff5,0xfff5,0xfff4,0xfff4,0xfff4,0xfff4,0xfff3,0xfff3,0xfff3,0xfff3,0xfff2,0xfff2,0xfff2,0xfff2,0xfff2,0xfff2,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff0,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff2,0xfff2,0xfff2,0xfff2,0xfff2,0xfff2,0xfff3,0xfff3,0xfff3,0xfff3,0xfff4,0xfff4,0xfff4,0xfff4,0xfff5,0xfff5,0xfff5,0xfff5,0xfff6,0xfff6,0xfff6,0xfff7,0xfff7,0xfff7,0xfff8,0xfff8,0xfff9,0xfff9,0xfff9,0xfffa,0xfffa,0xfffa,0xfffb,0xfffb,0xfffc,0xfffc,0xfffc,0xfffd,0xfffd,0xfffe,0xfffe,0xfffe,0xffff,0xffff,0x0000,0x0000,0x0000

sin_wave_cymbal:
  .hword 0x0000,0x000d,0x0017,0x001b,0x0017,0x000d,0x0000,0xfff3,0xffe9,0xffe5,0xffe9,0xfff3,0x0000

sin_wave_harmony:
  .hword 0x0000,0x0000,0x0000,0x0001,0x0001,0x0003,0x0003,0x0004,0x0004,0x0006,0x0006,0x0007,0x0007,0x0008,0x0009,0x0009,0x000a,0x000a,0x000b,0x000c,0x000c,0x000c,0x000e,0x000e,0x000e,0x000e,0x000f,0x0010,0x0010,0x0010,0x0011,0x0011,0x0012,0x0012,0x0012,0x0012,0x0012,0x0012,0x0013,0x0013,0x0014,0x0013,0x0013,0x0013,0x0014,0x0014,0x0014,0x0014,0x0014,0x0014,0x0014,0x0014,0x0014,0x0014,0x0014,0x0013,0x0013,0x0013,0x0013,0x0012,0x0013,0x0013,0x0012,0x0012,0x0012,0x0011,0x0011,0x0010,0x0010,0x0010,0x000f,0x000f,0x000e,0x000e,0x000d,0x000d,0x000c,0x000c,0x000b,0x000b,0x000c,0x000b,0x000b,0x000a,0x000a,0x0009,0x0009,0x0008,0x0008,0x0007,0x0007,0x0006,0x0006,0x0006,0x0005,0x0005,0x0004,0x0004,0x0004,0x0003,0x0003,0x0002,0x0001,0x0001,0x0001,0x0001,0x0000,0x0000,0x0000,0x0000,0xfffe,0xfffe,0xfffe,0xfffe,0xfffe,0xfffe,0xfffe,0xfffd,0xfffd,0xfffd,0xfffc,0xfffd,0xfffd,0xfffc,0xfffc,0xfffc,0xfffc,0xfffc,0xfffc,0xfffb,0xfffb,0xfffc,0xfffc,0xfffc,0xfffb,0xfffc,0xfffc,0xfffc,0xfffc,0xfffc,0xfffc,0xfffc,0xfffd,0xfffc,0xfffc,0xfffd,0xfffd,0xfffe,0xfffd,0xfffd,0xfffe,0xfffe,0xfffe,0xfffe,0xffff,0xffff,0xffff,0xffff,0x0000,0x0000,0x0000,0x0000,0x0000,0x0001,0x0001,0x0001,0x0001,0x0002,0x0002,0x0002,0x0002,0x0003,0x0003,0x0002,0x0003,0x0003,0x0004,0x0004,0x0003,0x0004,0x0004,0x0004,0x0004,0x0004,0x0004,0x0004,0x0005,0x0004,0x0004,0x0004,0x0005,0x0005,0x0004,0x0004,0x0004,0x0004,0x0004,0x0004,0x0003,0x0003,0x0004,0x0003,0x0003,0x0003,0x0002,0x0002,0x0002,0x0002,0x0002,0x0002,0x0002,0x0000,0x0000,0x0000,0x0000,0xffff,0xffff,0xffff,0xffff,0xfffe,0xfffd,0xfffd,0xfffc,0xfffc,0xfffc,0xfffb,0xfffb,0xfffa,0xfffa,0xfffa,0xfff9,0xfff9,0xfff8,0xfff8,0xfff7,0xfff7,0xfff6,0xfff6,0xfff5,0xfff5,0xfff4,0xfff5,0xfff5,0xfff4,0xfff4,0xfff3,0xfff3,0xfff2,0xfff2,0xfff1,0xfff1,0xfff0,0xfff0,0xfff0,0xffef,0xffef,0xffee,0xffee,0xffee,0xffed,0xffed,0xffee,0xffed,0xffed,0xffed,0xffed,0xffec,0xffec,0xffec,0xffec,0xffec,0xffec,0xffec,0xffec,0xffec,0xffec,0xffec,0xffed,0xffed,0xffed,0xffec,0xffed,0xffed,0xffee,0xffee,0xffee,0xffee,0xffee,0xffee,0xffef,0xffef,0xfff0,0xfff0,0xfff0,0xfff1,0xfff2,0xfff2,0xfff2,0xfff2,0xfff4,0xfff4,0xfff4,0xfff5,0xfff6,0xfff6,0xfff7,0xfff7,0xfff8,0xfff9,0xfff9,0xfffa,0xfffa,0xfffc,0xfffc,0xfffd,0xfffd,0xffff,0xffff,0x0000,0x0000,0x0000
